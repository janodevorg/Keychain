[{"rawIndexableTextContent":"Initializes a keychain with an account name.  Name of the account","kind":"symbol","title":"init(accountName:accessGroup:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain\/ValueKeychainStore\/init(accountName:accessGroup:)","interfaceLanguage":"swift"}},"summary":"Initializes a keychain with an account name."},{"rawIndexableTextContent":"Sets a value.  Discussion If value is nil if value existed is removed if value didn’t exist nothing is done If value is not nil if value existed it is updated if value didn’t exist it is created KeychainError if the operation fails.","kind":"symbol","title":"set(_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain\/ValueKeychainStore\/set(_:)","interfaceLanguage":"swift"}},"summary":"Sets a value."},{"rawIndexableTextContent":"An interface to a store that reads and writes a single value. ","kind":"symbol","title":"ValueStore","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain\/ValueStore","interfaceLanguage":"swift"}},"summary":"An interface to a store that reads and writes a single value."},{"rawIndexableTextContent":"Inherited from CustomDebugStringConvertible.debugDescription. ","kind":"symbol","title":"debugDescription","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain\/KeychainError\/debugDescription","interfaceLanguage":"swift"}},"summary":"Inherited from CustomDebugStringConvertible.debugDescription."},{"rawIndexableTextContent":" ","kind":"symbol","title":"get()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain\/ValueStore\/get()","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":" ","kind":"symbol","title":"observeChanges(callback:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain\/ObservedValueStore\/observeChanges(callback:)","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":" ","kind":"symbol","title":"KeychainError.unexpectedStatus(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain\/KeychainError\/unexpectedStatus(_:_:)","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"Inherited from ValueStore.get(). ","kind":"symbol","title":"get()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain\/ObservedValueStore\/get()","interfaceLanguage":"swift"}},"summary":"Inherited from ValueStore.get()."},{"rawIndexableTextContent":"  Implementation backing the value.","kind":"symbol","title":"init(valueStore:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain\/ObservedValueStore\/init(valueStore:)","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"Inherited from ValueStore.set(_:). ","kind":"symbol","title":"set(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain\/ObservedValueStore\/set(_:)","interfaceLanguage":"swift"}},"summary":"Inherited from ValueStore.set(_:)."},{"rawIndexableTextContent":" ","kind":"symbol","title":"set(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain\/ValueStore\/set(_:)","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"Inherited from Error.localizedDescription. ","kind":"symbol","title":"localizedDescription","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain\/KeychainError\/localizedDescription","interfaceLanguage":"swift"}},"summary":"Inherited from Error.localizedDescription."},{"rawIndexableTextContent":"A store for a value that can be observed. ","kind":"symbol","title":"ObservedValueStore","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain\/ObservedValueStore","interfaceLanguage":"swift"}},"summary":"A store for a value that can be observed."},{"rawIndexableTextContent":"","kind":"article","title":"Error Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain\/KeychainError\/Error-Implementations","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"Inherited from CustomStringConvertible.description. ","kind":"symbol","title":"description","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain\/KeychainError\/description","interfaceLanguage":"swift"}},"summary":"Inherited from CustomStringConvertible.description."},{"rawIndexableTextContent":" ","kind":"symbol","title":"KeychainError","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain\/KeychainError","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"Stores a value as a generic password. ","kind":"symbol","title":"ValueKeychainStore","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain\/ValueKeychainStore","interfaceLanguage":"swift"}},"summary":"Stores a value as a generic password."},{"rawIndexableTextContent":" ","kind":"symbol","title":"init(unregister:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain\/Observation\/init(unregister:)","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"Reads the value.  Return Value the value or nil if it didn’t exist. Discussion KeychainError if the operation fails with other than not found.","kind":"symbol","title":"get()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain\/ValueKeychainStore\/get()","interfaceLanguage":"swift"}},"summary":"Reads the value."},{"rawIndexableTextContent":" ","kind":"symbol","title":"stopObserving()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain\/Observation\/stopObserving()","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"Result from an observer registration. This object can be used by observers to unregister themselves. ","kind":"symbol","title":"Observation","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain\/Observation","interfaceLanguage":"swift"}},"summary":"Result from an observer registration. This object can be used by observers to unregister themselves."},{"rawIndexableTextContent":"Keychain wrapper. Overview Enable keychain sharing To enable keychain item sharing: Enable Keychain Sharing in target > Signing & Capabilities. Click the plus sign to add the capability Keychain Sharing. Set a value in “Keychain Groups” for each shared keychain item. The value must start with the Bundle Seed ID, followed by an arbitrary string. This creates a file .entitlements, pointed by Build Settings > Code Signing Entitlements. Here is the file I generated:  The $(AppIdentifierPrefix) will be replaced with your Team ID. The Team ID is listed in the Member Center:  The whole string for me is “PPSF6CNP8Q.dev.jano.keychain.example”. Yours will be different. Usage Store a value as a generic password:  Use the ObservedValueStore to react to value changes:  ","kind":"symbol","title":"Keychain","headings":["Overview","Enable keychain sharing","Usage"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Keychain\/documentation\/Keychain","interfaceLanguage":"swift"}},"summary":"Keychain wrapper."}]